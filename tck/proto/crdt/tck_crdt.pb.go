// Copyright 2020 Lightbend Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Extension for specifying which field in a message is to be considered an
// entity key, for the purposes associating gRPC calls with entities and
// sharding.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: tck_crdt.proto

package crdt

import (
	context "context"
	_ "github.com/cloudstateio/go-support/cloudstate"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	_ "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// copy from crdt.proto
type CrdtClock int32

const (
	// Use the default clock for deciding the last write, which is the system clocks
	// milliseconds since epoch.
	CrdtClock_DEFAULT CrdtClock = 0
	// Use the reverse semantics with the default clock, to enable first write wins.
	CrdtClock_REVERSE CrdtClock = 1
	// Use a custom clock value, set using custom_clock_value.
	CrdtClock_CUSTOM CrdtClock = 2
	// Use a custom clock value, but automatically increment it by one if the clock
	// value from the current value is equal to the custom_clock_value.
	CrdtClock_CUSTOM_AUTO_INCREMENT CrdtClock = 3
)

// Enum value maps for CrdtClock.
var (
	CrdtClock_name = map[int32]string{
		0: "DEFAULT",
		1: "REVERSE",
		2: "CUSTOM",
		3: "CUSTOM_AUTO_INCREMENT",
	}
	CrdtClock_value = map[string]int32{
		"DEFAULT":               0,
		"REVERSE":               1,
		"CUSTOM":                2,
		"CUSTOM_AUTO_INCREMENT": 3,
	}
)

func (x CrdtClock) Enum() *CrdtClock {
	p := new(CrdtClock)
	*p = x
	return p
}

func (x CrdtClock) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CrdtClock) Descriptor() protoreflect.EnumDescriptor {
	return file_tck_crdt_proto_enumTypes[0].Descriptor()
}

func (CrdtClock) Type() protoreflect.EnumType {
	return &file_tck_crdt_proto_enumTypes[0]
}

func (x CrdtClock) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CrdtClock.Descriptor instead.
func (CrdtClock) EnumDescriptor() ([]byte, []int) {
	return file_tck_crdt_proto_rawDescGZIP(), []int{0}
}

type Get struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	FailWith string `protobuf:"bytes,2,opt,name=failWith,proto3" json:"failWith,omitempty"`
}

func (x *Get) Reset() {
	*x = Get{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Get) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Get) ProtoMessage() {}

func (x *Get) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Get.ProtoReflect.Descriptor instead.
func (*Get) Descriptor() ([]byte, []int) {
	return file_tck_crdt_proto_rawDescGZIP(), []int{0}
}

func (x *Get) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Get) GetFailWith() string {
	if x != nil {
		return x.FailWith
	}
	return ""
}

type AnySupportType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*AnySupportType_AnyValue
	//	*AnySupportType_StringValue
	//	*AnySupportType_BytesValue
	//	*AnySupportType_Int32Value
	//	*AnySupportType_Int64Value
	//	*AnySupportType_FloatValue
	//	*AnySupportType_DoubleValue
	//	*AnySupportType_BoolValue
	Value isAnySupportType_Value `protobuf_oneof:"value"`
}

func (x *AnySupportType) Reset() {
	*x = AnySupportType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnySupportType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnySupportType) ProtoMessage() {}

func (x *AnySupportType) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnySupportType.ProtoReflect.Descriptor instead.
func (*AnySupportType) Descriptor() ([]byte, []int) {
	return file_tck_crdt_proto_rawDescGZIP(), []int{1}
}

func (m *AnySupportType) GetValue() isAnySupportType_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *AnySupportType) GetAnyValue() *any.Any {
	if x, ok := x.GetValue().(*AnySupportType_AnyValue); ok {
		return x.AnyValue
	}
	return nil
}

func (x *AnySupportType) GetStringValue() string {
	if x, ok := x.GetValue().(*AnySupportType_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *AnySupportType) GetBytesValue() []byte {
	if x, ok := x.GetValue().(*AnySupportType_BytesValue); ok {
		return x.BytesValue
	}
	return nil
}

func (x *AnySupportType) GetInt32Value() int32 {
	if x, ok := x.GetValue().(*AnySupportType_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (x *AnySupportType) GetInt64Value() int64 {
	if x, ok := x.GetValue().(*AnySupportType_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (x *AnySupportType) GetFloatValue() float32 {
	if x, ok := x.GetValue().(*AnySupportType_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *AnySupportType) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*AnySupportType_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *AnySupportType) GetBoolValue() bool {
	if x, ok := x.GetValue().(*AnySupportType_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

type isAnySupportType_Value interface {
	isAnySupportType_Value()
}

type AnySupportType_AnyValue struct {
	AnyValue *any.Any `protobuf:"bytes,3,opt,name=any_value,json=anyValue,proto3,oneof"`
}

type AnySupportType_StringValue struct {
	StringValue string `protobuf:"bytes,4,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type AnySupportType_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,5,opt,name=bytes_value,json=bytesValue,proto3,oneof"`
}

type AnySupportType_Int32Value struct {
	Int32Value int32 `protobuf:"varint,6,opt,name=int32_value,json=int32Value,proto3,oneof"`
}

type AnySupportType_Int64Value struct {
	Int64Value int64 `protobuf:"varint,7,opt,name=int64_value,json=int64Value,proto3,oneof"`
}

type AnySupportType_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,8,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type AnySupportType_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,9,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type AnySupportType_BoolValue struct {
	BoolValue bool `protobuf:"varint,10,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

func (*AnySupportType_AnyValue) isAnySupportType_Value() {}

func (*AnySupportType_StringValue) isAnySupportType_Value() {}

func (*AnySupportType_BytesValue) isAnySupportType_Value() {}

func (*AnySupportType_Int32Value) isAnySupportType_Value() {}

func (*AnySupportType_Int64Value) isAnySupportType_Value() {}

func (*AnySupportType_FloatValue) isAnySupportType_Value() {}

func (*AnySupportType_DoubleValue) isAnySupportType_Value() {}

func (*AnySupportType_BoolValue) isAnySupportType_Value() {}

type GCounterIncrement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Fail  bool   `protobuf:"varint,2,opt,name=fail,proto3" json:"fail,omitempty"`
	Value uint64 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GCounterIncrement) Reset() {
	*x = GCounterIncrement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCounterIncrement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCounterIncrement) ProtoMessage() {}

func (x *GCounterIncrement) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCounterIncrement.ProtoReflect.Descriptor instead.
func (*GCounterIncrement) Descriptor() ([]byte, []int) {
	return file_tck_crdt_proto_rawDescGZIP(), []int{2}
}

func (x *GCounterIncrement) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GCounterIncrement) GetFail() bool {
	if x != nil {
		return x.Fail
	}
	return false
}

func (x *GCounterIncrement) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type GCounterValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GCounterValue) Reset() {
	*x = GCounterValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCounterValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCounterValue) ProtoMessage() {}

func (x *GCounterValue) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCounterValue.ProtoReflect.Descriptor instead.
func (*GCounterValue) Descriptor() ([]byte, []int) {
	return file_tck_crdt_proto_rawDescGZIP(), []int{3}
}

func (x *GCounterValue) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type PNCounterIncrement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Fail  bool   `protobuf:"varint,2,opt,name=fail,proto3" json:"fail,omitempty"`
	Value int64  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PNCounterIncrement) Reset() {
	*x = PNCounterIncrement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PNCounterIncrement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PNCounterIncrement) ProtoMessage() {}

func (x *PNCounterIncrement) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PNCounterIncrement.ProtoReflect.Descriptor instead.
func (*PNCounterIncrement) Descriptor() ([]byte, []int) {
	return file_tck_crdt_proto_rawDescGZIP(), []int{4}
}

func (x *PNCounterIncrement) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PNCounterIncrement) GetFail() bool {
	if x != nil {
		return x.Fail
	}
	return false
}

func (x *PNCounterIncrement) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type PNCounterDecrement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Fail  bool   `protobuf:"varint,2,opt,name=fail,proto3" json:"fail,omitempty"`
	Value int64  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PNCounterDecrement) Reset() {
	*x = PNCounterDecrement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PNCounterDecrement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PNCounterDecrement) ProtoMessage() {}

func (x *PNCounterDecrement) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PNCounterDecrement.ProtoReflect.Descriptor instead.
func (*PNCounterDecrement) Descriptor() ([]byte, []int) {
	return file_tck_crdt_proto_rawDescGZIP(), []int{5}
}

func (x *PNCounterDecrement) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PNCounterDecrement) GetFail() bool {
	if x != nil {
		return x.Fail
	}
	return false
}

func (x *PNCounterDecrement) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type PNCounterValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PNCounterValue) Reset() {
	*x = PNCounterValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PNCounterValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PNCounterValue) ProtoMessage() {}

func (x *PNCounterValue) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PNCounterValue.ProtoReflect.Descriptor instead.
func (*PNCounterValue) Descriptor() ([]byte, []int) {
	return file_tck_crdt_proto_rawDescGZIP(), []int{6}
}

func (x *PNCounterValue) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type GSetAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string          `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Fail  bool            `protobuf:"varint,2,opt,name=fail,proto3" json:"fail,omitempty"`
	Value *AnySupportType `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GSetAdd) Reset() {
	*x = GSetAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GSetAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GSetAdd) ProtoMessage() {}

func (x *GSetAdd) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GSetAdd.ProtoReflect.Descriptor instead.
func (*GSetAdd) Descriptor() ([]byte, []int) {
	return file_tck_crdt_proto_rawDescGZIP(), []int{7}
}

func (x *GSetAdd) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GSetAdd) GetFail() bool {
	if x != nil {
		return x.Fail
	}
	return false
}

func (x *GSetAdd) GetValue() *AnySupportType {
	if x != nil {
		return x.Value
	}
	return nil
}

type GSetValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*AnySupportType `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *GSetValue) Reset() {
	*x = GSetValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GSetValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GSetValue) ProtoMessage() {}

func (x *GSetValue) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GSetValue.ProtoReflect.Descriptor instead.
func (*GSetValue) Descriptor() ([]byte, []int) {
	return file_tck_crdt_proto_rawDescGZIP(), []int{8}
}

func (x *GSetValue) GetValues() []*AnySupportType {
	if x != nil {
		return x.Values
	}
	return nil
}

type GSetValueAnySupport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*AnySupportType `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *GSetValueAnySupport) Reset() {
	*x = GSetValueAnySupport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GSetValueAnySupport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GSetValueAnySupport) ProtoMessage() {}

func (x *GSetValueAnySupport) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GSetValueAnySupport.ProtoReflect.Descriptor instead.
func (*GSetValueAnySupport) Descriptor() ([]byte, []int) {
	return file_tck_crdt_proto_rawDescGZIP(), []int{9}
}

func (x *GSetValueAnySupport) GetValues() []*AnySupportType {
	if x != nil {
		return x.Values
	}
	return nil
}

type GSetSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64 `protobuf:"zigzag64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GSetSize) Reset() {
	*x = GSetSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GSetSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GSetSize) ProtoMessage() {}

func (x *GSetSize) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GSetSize.ProtoReflect.Descriptor instead.
func (*GSetSize) Descriptor() ([]byte, []int) {
	return file_tck_crdt_proto_rawDescGZIP(), []int{10}
}

func (x *GSetSize) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type ORSetAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string          `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Fail  bool            `protobuf:"varint,2,opt,name=fail,proto3" json:"fail,omitempty"`
	Value *AnySupportType `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ORSetAdd) Reset() {
	*x = ORSetAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ORSetAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ORSetAdd) ProtoMessage() {}

func (x *ORSetAdd) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ORSetAdd.ProtoReflect.Descriptor instead.
func (*ORSetAdd) Descriptor() ([]byte, []int) {
	return file_tck_crdt_proto_rawDescGZIP(), []int{11}
}

func (x *ORSetAdd) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ORSetAdd) GetFail() bool {
	if x != nil {
		return x.Fail
	}
	return false
}

func (x *ORSetAdd) GetValue() *AnySupportType {
	if x != nil {
		return x.Value
	}
	return nil
}

type ORSetRemove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string          `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Fail  bool            `protobuf:"varint,2,opt,name=fail,proto3" json:"fail,omitempty"`
	Value *AnySupportType `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ORSetRemove) Reset() {
	*x = ORSetRemove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ORSetRemove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ORSetRemove) ProtoMessage() {}

func (x *ORSetRemove) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ORSetRemove.ProtoReflect.Descriptor instead.
func (*ORSetRemove) Descriptor() ([]byte, []int) {
	return file_tck_crdt_proto_rawDescGZIP(), []int{12}
}

func (x *ORSetRemove) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ORSetRemove) GetFail() bool {
	if x != nil {
		return x.Fail
	}
	return false
}

func (x *ORSetRemove) GetValue() *AnySupportType {
	if x != nil {
		return x.Value
	}
	return nil
}

type ORSetValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*any.Any `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ORSetValue) Reset() {
	*x = ORSetValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ORSetValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ORSetValue) ProtoMessage() {}

func (x *ORSetValue) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ORSetValue.ProtoReflect.Descriptor instead.
func (*ORSetValue) Descriptor() ([]byte, []int) {
	return file_tck_crdt_proto_rawDescGZIP(), []int{13}
}

func (x *ORSetValue) GetValues() []*any.Any {
	if x != nil {
		return x.Values
	}
	return nil
}

type ORSetSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64 `protobuf:"zigzag64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ORSetSize) Reset() {
	*x = ORSetSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ORSetSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ORSetSize) ProtoMessage() {}

func (x *ORSetSize) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ORSetSize.ProtoReflect.Descriptor instead.
func (*ORSetSize) Descriptor() ([]byte, []int) {
	return file_tck_crdt_proto_rawDescGZIP(), []int{14}
}

func (x *ORSetSize) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type FlagEnable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Fail bool   `protobuf:"varint,2,opt,name=fail,proto3" json:"fail,omitempty"`
}

func (x *FlagEnable) Reset() {
	*x = FlagEnable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagEnable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagEnable) ProtoMessage() {}

func (x *FlagEnable) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagEnable.ProtoReflect.Descriptor instead.
func (*FlagEnable) Descriptor() ([]byte, []int) {
	return file_tck_crdt_proto_rawDescGZIP(), []int{15}
}

func (x *FlagEnable) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FlagEnable) GetFail() bool {
	if x != nil {
		return x.Fail
	}
	return false
}

type FlagValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FlagValue) Reset() {
	*x = FlagValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagValue) ProtoMessage() {}

func (x *FlagValue) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagValue.ProtoReflect.Descriptor instead.
func (*FlagValue) Descriptor() ([]byte, []int) {
	return file_tck_crdt_proto_rawDescGZIP(), []int{16}
}

func (x *FlagValue) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type LWWRegisterSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Fail  bool     `protobuf:"varint,2,opt,name=fail,proto3" json:"fail,omitempty"`
	Value *any.Any `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *LWWRegisterSet) Reset() {
	*x = LWWRegisterSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LWWRegisterSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LWWRegisterSet) ProtoMessage() {}

func (x *LWWRegisterSet) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LWWRegisterSet.ProtoReflect.Descriptor instead.
func (*LWWRegisterSet) Descriptor() ([]byte, []int) {
	return file_tck_crdt_proto_rawDescGZIP(), []int{17}
}

func (x *LWWRegisterSet) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LWWRegisterSet) GetFail() bool {
	if x != nil {
		return x.Fail
	}
	return false
}

func (x *LWWRegisterSet) GetValue() *any.Any {
	if x != nil {
		return x.Value
	}
	return nil
}

type LWWRegisterSetWithClock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key              string    `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Fail             bool      `protobuf:"varint,2,opt,name=fail,proto3" json:"fail,omitempty"`
	Value            *any.Any  `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Clock            CrdtClock `protobuf:"varint,4,opt,name=clock,proto3,enum=crdt.CrdtClock" json:"clock,omitempty"`
	CustomClockValue int64     `protobuf:"varint,5,opt,name=custom_clock_value,json=customClockValue,proto3" json:"custom_clock_value,omitempty"`
}

func (x *LWWRegisterSetWithClock) Reset() {
	*x = LWWRegisterSetWithClock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LWWRegisterSetWithClock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LWWRegisterSetWithClock) ProtoMessage() {}

func (x *LWWRegisterSetWithClock) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LWWRegisterSetWithClock.ProtoReflect.Descriptor instead.
func (*LWWRegisterSetWithClock) Descriptor() ([]byte, []int) {
	return file_tck_crdt_proto_rawDescGZIP(), []int{18}
}

func (x *LWWRegisterSetWithClock) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LWWRegisterSetWithClock) GetFail() bool {
	if x != nil {
		return x.Fail
	}
	return false
}

func (x *LWWRegisterSetWithClock) GetValue() *any.Any {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *LWWRegisterSetWithClock) GetClock() CrdtClock {
	if x != nil {
		return x.Clock
	}
	return CrdtClock_DEFAULT
}

func (x *LWWRegisterSetWithClock) GetCustomClockValue() int64 {
	if x != nil {
		return x.CustomClockValue
	}
	return 0
}

type LWWRegisterValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *any.Any `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *LWWRegisterValue) Reset() {
	*x = LWWRegisterValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LWWRegisterValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LWWRegisterValue) ProtoMessage() {}

func (x *LWWRegisterValue) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LWWRegisterValue.ProtoReflect.Descriptor instead.
func (*LWWRegisterValue) Descriptor() ([]byte, []int) {
	return file_tck_crdt_proto_rawDescGZIP(), []int{19}
}

func (x *LWWRegisterValue) GetValue() *any.Any {
	if x != nil {
		return x.Value
	}
	return nil
}

type ORMapSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Fail     bool     `protobuf:"varint,2,opt,name=fail,proto3" json:"fail,omitempty"`
	EntryKey *any.Any `protobuf:"bytes,3,opt,name=entry_key,json=entryKey,proto3" json:"entry_key,omitempty"`
	Value    *any.Any `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ORMapSet) Reset() {
	*x = ORMapSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ORMapSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ORMapSet) ProtoMessage() {}

func (x *ORMapSet) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ORMapSet.ProtoReflect.Descriptor instead.
func (*ORMapSet) Descriptor() ([]byte, []int) {
	return file_tck_crdt_proto_rawDescGZIP(), []int{20}
}

func (x *ORMapSet) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ORMapSet) GetFail() bool {
	if x != nil {
		return x.Fail
	}
	return false
}

func (x *ORMapSet) GetEntryKey() *any.Any {
	if x != nil {
		return x.EntryKey
	}
	return nil
}

func (x *ORMapSet) GetValue() *any.Any {
	if x != nil {
		return x.Value
	}
	return nil
}

type ORMapKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Fail  bool     `protobuf:"varint,2,opt,name=fail,proto3" json:"fail,omitempty"`
	Value *any.Any `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ORMapKey) Reset() {
	*x = ORMapKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ORMapKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ORMapKey) ProtoMessage() {}

func (x *ORMapKey) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ORMapKey.ProtoReflect.Descriptor instead.
func (*ORMapKey) Descriptor() ([]byte, []int) {
	return file_tck_crdt_proto_rawDescGZIP(), []int{21}
}

func (x *ORMapKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ORMapKey) GetFail() bool {
	if x != nil {
		return x.Fail
	}
	return false
}

func (x *ORMapKey) GetValue() *any.Any {
	if x != nil {
		return x.Value
	}
	return nil
}

type ORMapEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntryKey *any.Any `protobuf:"bytes,1,opt,name=entry_key,json=entryKey,proto3" json:"entry_key,omitempty"`
	Value    *any.Any `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ORMapEntry) Reset() {
	*x = ORMapEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ORMapEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ORMapEntry) ProtoMessage() {}

func (x *ORMapEntry) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ORMapEntry.ProtoReflect.Descriptor instead.
func (*ORMapEntry) Descriptor() ([]byte, []int) {
	return file_tck_crdt_proto_rawDescGZIP(), []int{22}
}

func (x *ORMapEntry) GetEntryKey() *any.Any {
	if x != nil {
		return x.EntryKey
	}
	return nil
}

func (x *ORMapEntry) GetValue() *any.Any {
	if x != nil {
		return x.Value
	}
	return nil
}

type ORMapEntries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*ORMapEntry `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ORMapEntries) Reset() {
	*x = ORMapEntries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ORMapEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ORMapEntries) ProtoMessage() {}

func (x *ORMapEntries) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ORMapEntries.ProtoReflect.Descriptor instead.
func (*ORMapEntries) Descriptor() ([]byte, []int) {
	return file_tck_crdt_proto_rawDescGZIP(), []int{23}
}

func (x *ORMapEntries) GetValues() []*ORMapEntry {
	if x != nil {
		return x.Values
	}
	return nil
}

type ORMapSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64 `protobuf:"zigzag64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ORMapSize) Reset() {
	*x = ORMapSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ORMapSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ORMapSize) ProtoMessage() {}

func (x *ORMapSize) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ORMapSize.ProtoReflect.Descriptor instead.
func (*ORMapSize) Descriptor() ([]byte, []int) {
	return file_tck_crdt_proto_rawDescGZIP(), []int{24}
}

func (x *ORMapSize) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type ORMapKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*any.Any `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ORMapKeys) Reset() {
	*x = ORMapKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ORMapKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ORMapKeys) ProtoMessage() {}

func (x *ORMapKeys) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ORMapKeys.ProtoReflect.Descriptor instead.
func (*ORMapKeys) Descriptor() ([]byte, []int) {
	return file_tck_crdt_proto_rawDescGZIP(), []int{25}
}

func (x *ORMapKeys) GetValues() []*any.Any {
	if x != nil {
		return x.Values
	}
	return nil
}

type Vote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Fail  bool   `protobuf:"varint,2,opt,name=fail,proto3" json:"fail,omitempty"`
	Value bool   `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Vote) Reset() {
	*x = Vote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vote) ProtoMessage() {}

func (x *Vote) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vote.ProtoReflect.Descriptor instead.
func (*Vote) Descriptor() ([]byte, []int) {
	return file_tck_crdt_proto_rawDescGZIP(), []int{26}
}

func (x *Vote) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Vote) GetFail() bool {
	if x != nil {
		return x.Fail
	}
	return false
}

func (x *Vote) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type SelfVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SelfVote) Reset() {
	*x = SelfVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfVote) ProtoMessage() {}

func (x *SelfVote) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfVote.ProtoReflect.Descriptor instead.
func (*SelfVote) Descriptor() ([]byte, []int) {
	return file_tck_crdt_proto_rawDescGZIP(), []int{27}
}

func (x *SelfVote) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type Voters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Voters) Reset() {
	*x = Voters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tck_crdt_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Voters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Voters) ProtoMessage() {}

func (x *Voters) ProtoReflect() protoreflect.Message {
	mi := &file_tck_crdt_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Voters.ProtoReflect.Descriptor instead.
func (*Voters) Descriptor() ([]byte, []int) {
	return file_tck_crdt_proto_rawDescGZIP(), []int{28}
}

func (x *Voters) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

var File_tck_crdt_proto protoreflect.FileDescriptor

var file_tck_crdt_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x74, 0x63, 0x6b, 0x5f, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x04, 0x63, 0x72, 0x64, 0x74, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x39, 0x0a, 0x03, 0x47,
	0x65, 0x74, 0x12, 0x16, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61,
	0x69, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61,
	0x69, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x22, 0xc5, 0x02, 0x0a, 0x0e, 0x41, 0x6e, 0x79, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x61, 0x6e, 0x79,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x48, 0x00, 0x52, 0x08, 0x61, 0x6e, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23,
	0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x55,
	0x0a, 0x11, 0x47, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x25, 0x0a, 0x0d, 0x47, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x56, 0x0a, 0x12,
	0x50, 0x4e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x61,
	0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x56, 0x0a, 0x12, 0x50, 0x4e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x44, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x26, 0x0a, 0x0e,
	0x50, 0x4e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x61, 0x0a, 0x07, 0x47, 0x53, 0x65, 0x74, 0x41, 0x64, 0x64, 0x12,
	0x16, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x90, 0xb5,
	0x18, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x12, 0x2a, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x72, 0x64,
	0x74, 0x2e, 0x41, 0x6e, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x39, 0x0a, 0x09, 0x47, 0x53, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x41, 0x6e, 0x79, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0x43, 0x0a, 0x13, 0x47, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41,
	0x6e, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x72, 0x64, 0x74,
	0x2e, 0x41, 0x6e, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x20, 0x0a, 0x08, 0x47, 0x53, 0x65, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x62, 0x0a, 0x08, 0x4f, 0x52, 0x53,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x12, 0x16, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x61, 0x69,
	0x6c, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x41, 0x6e, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x65, 0x0a,
	0x0b, 0x4f, 0x52, 0x53, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x90, 0xb5, 0x18, 0x01, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x41,
	0x6e, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x0a, 0x0a, 0x4f, 0x52, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0x21, 0x0a, 0x09, 0x4f, 0x52, 0x53, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x38, 0x0a, 0x0a, 0x46, 0x6c, 0x61, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x16, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0x90, 0xb5, 0x18, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x61, 0x69,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x22, 0x21, 0x0a,
	0x09, 0x46, 0x6c, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x68, 0x0a, 0x0e, 0x4c, 0x57, 0x57, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x12, 0x16, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x61,
	0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x12, 0x2a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x17, 0x4c,
	0x57, 0x57, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x61,
	0x69, 0x6c, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25,
	0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x63, 0x72, 0x64, 0x74, 0x2e, 0x43, 0x72, 0x64, 0x74, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05,
	0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x3e, 0x0a, 0x10, 0x4c, 0x57, 0x57, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x08, 0x4f, 0x52, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74,
	0x12, 0x16, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x90,
	0xb5, 0x18, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x61, 0x69, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x12, 0x31, 0x0a, 0x09,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12,
	0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x62, 0x0a, 0x08, 0x4f,
	0x52, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66,
	0x61, 0x69, 0x6c, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x6b, 0x0a, 0x0a, 0x4f, 0x52, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x31, 0x0a,
	0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79,
	0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x38, 0x0a, 0x0c,
	0x4f, 0x52, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x72, 0x64, 0x74, 0x2e, 0x4f, 0x52, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x21, 0x0a, 0x09, 0x4f, 0x52, 0x4d, 0x61, 0x70, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x39, 0x0a, 0x09, 0x4f, 0x52, 0x4d,
	0x61, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0x48, 0x0a, 0x04, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x90, 0xb5, 0x18, 0x01, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x20,
	0x0a, 0x08, 0x53, 0x65, 0x6c, 0x66, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x1e, 0x0a, 0x06, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x2a, 0x4c, 0x0a, 0x09, 0x43, 0x72, 0x64, 0x74, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0b, 0x0a,
	0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45,
	0x56, 0x45, 0x52, 0x53, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x55,
	0x54, 0x4f, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x32, 0xaa,
	0x0a, 0x0a, 0x07, 0x54, 0x63, 0x6b, 0x43, 0x72, 0x64, 0x74, 0x12, 0x41, 0x0a, 0x11, 0x49, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x17, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x47, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e,
	0x47, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x47, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x09, 0x2e, 0x63,
	0x72, 0x64, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x47,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x44, 0x0a, 0x12,
	0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x4e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x18, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x50, 0x4e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x14, 0x2e, 0x63,
	0x72, 0x64, 0x74, 0x2e, 0x50, 0x4e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x44, 0x0a, 0x12, 0x44, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x4e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e,
	0x50, 0x4e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x50, 0x4e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50,
	0x4e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x09, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x50, 0x4e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x41, 0x64, 0x64,
	0x47, 0x53, 0x65, 0x74, 0x12, 0x0d, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x47, 0x53, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x1a, 0x0f, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x47, 0x53, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x47, 0x53, 0x65, 0x74, 0x12,
	0x09, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x1a, 0x0f, 0x2e, 0x63, 0x72, 0x64,
	0x74, 0x2e, 0x47, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x47, 0x53, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x09, 0x2e, 0x63, 0x72, 0x64,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x1a, 0x0e, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x47, 0x53, 0x65,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x4f, 0x52, 0x53, 0x65,
	0x74, 0x12, 0x0e, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x4f, 0x52, 0x53, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x1a, 0x10, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x4f, 0x52, 0x53, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x52, 0x53,
	0x65, 0x74, 0x12, 0x11, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x4f, 0x52, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x1a, 0x10, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x4f, 0x52, 0x53,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4f, 0x52,
	0x53, 0x65, 0x74, 0x12, 0x09, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x1a, 0x10,
	0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x4f, 0x52, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2a, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4f, 0x52, 0x53, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x09, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x1a, 0x0f, 0x2e, 0x63, 0x72,
	0x64, 0x74, 0x2e, 0x4f, 0x52, 0x53, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2f, 0x0a, 0x0a,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x10, 0x2e, 0x63, 0x72, 0x64,
	0x74, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x0f, 0x2e, 0x63,
	0x72, 0x64, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x09, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x1a, 0x0f, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x4c, 0x57, 0x57, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x14, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x4c, 0x57,
	0x57, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x1a, 0x16, 0x2e, 0x63,
	0x72, 0x64, 0x74, 0x2e, 0x4c, 0x57, 0x57, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x50, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x4c, 0x57, 0x57, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x1d, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x4c, 0x57, 0x57, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x16,
	0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x4c, 0x57, 0x57, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x57, 0x57,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x09, 0x2e,
	0x63, 0x72, 0x64, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e,
	0x4c, 0x57, 0x57, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x4f, 0x52, 0x4d, 0x61, 0x70, 0x12, 0x0e, 0x2e, 0x63,
	0x72, 0x64, 0x74, 0x2e, 0x4f, 0x52, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x1a, 0x12, 0x2e, 0x63,
	0x72, 0x64, 0x74, 0x2e, 0x4f, 0x52, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x31, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x52, 0x4d, 0x61, 0x70, 0x12,
	0x0e, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x4f, 0x52, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x1a,
	0x12, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x4f, 0x52, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4f, 0x52, 0x4d, 0x61,
	0x70, 0x12, 0x0e, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x4f, 0x52, 0x4d, 0x61, 0x70, 0x4b, 0x65,
	0x79, 0x1a, 0x12, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x4f, 0x52, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4f, 0x52, 0x4d, 0x61,
	0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x09, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x1a, 0x0f, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x4f, 0x52, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x30, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x52, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x09, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x1a,
	0x12, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x4f, 0x52, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4f, 0x52, 0x4d, 0x61, 0x70, 0x4b,
	0x65, 0x79, 0x73, 0x12, 0x09, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x1a, 0x0f,
	0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x4f, 0x52, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x26, 0x0a, 0x08, 0x56, 0x6f, 0x74, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x0a, 0x2e, 0x63, 0x72,
	0x64, 0x74, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x1a, 0x0e, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x53,
	0x65, 0x6c, 0x66, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x56, 0x6f,
	0x74, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x09, 0x2e, 0x63, 0x72, 0x64,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x1a, 0x0e, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x53, 0x65, 0x6c,
	0x66, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x09, 0x2e, 0x63, 0x72, 0x64, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x1a, 0x0c, 0x2e,
	0x63, 0x72, 0x64, 0x74, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x42, 0x4b, 0x0a, 0x11, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x63, 0x6b,
	0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x69, 0x6f, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x2f, 0x74, 0x63, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63,
	0x72, 0x64, 0x74, 0x3b, 0x63, 0x72, 0x64, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tck_crdt_proto_rawDescOnce sync.Once
	file_tck_crdt_proto_rawDescData = file_tck_crdt_proto_rawDesc
)

func file_tck_crdt_proto_rawDescGZIP() []byte {
	file_tck_crdt_proto_rawDescOnce.Do(func() {
		file_tck_crdt_proto_rawDescData = protoimpl.X.CompressGZIP(file_tck_crdt_proto_rawDescData)
	})
	return file_tck_crdt_proto_rawDescData
}

var file_tck_crdt_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tck_crdt_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_tck_crdt_proto_goTypes = []interface{}{
	(CrdtClock)(0),                  // 0: crdt.CrdtClock
	(*Get)(nil),                     // 1: crdt.Get
	(*AnySupportType)(nil),          // 2: crdt.AnySupportType
	(*GCounterIncrement)(nil),       // 3: crdt.GCounterIncrement
	(*GCounterValue)(nil),           // 4: crdt.GCounterValue
	(*PNCounterIncrement)(nil),      // 5: crdt.PNCounterIncrement
	(*PNCounterDecrement)(nil),      // 6: crdt.PNCounterDecrement
	(*PNCounterValue)(nil),          // 7: crdt.PNCounterValue
	(*GSetAdd)(nil),                 // 8: crdt.GSetAdd
	(*GSetValue)(nil),               // 9: crdt.GSetValue
	(*GSetValueAnySupport)(nil),     // 10: crdt.GSetValueAnySupport
	(*GSetSize)(nil),                // 11: crdt.GSetSize
	(*ORSetAdd)(nil),                // 12: crdt.ORSetAdd
	(*ORSetRemove)(nil),             // 13: crdt.ORSetRemove
	(*ORSetValue)(nil),              // 14: crdt.ORSetValue
	(*ORSetSize)(nil),               // 15: crdt.ORSetSize
	(*FlagEnable)(nil),              // 16: crdt.FlagEnable
	(*FlagValue)(nil),               // 17: crdt.FlagValue
	(*LWWRegisterSet)(nil),          // 18: crdt.LWWRegisterSet
	(*LWWRegisterSetWithClock)(nil), // 19: crdt.LWWRegisterSetWithClock
	(*LWWRegisterValue)(nil),        // 20: crdt.LWWRegisterValue
	(*ORMapSet)(nil),                // 21: crdt.ORMapSet
	(*ORMapKey)(nil),                // 22: crdt.ORMapKey
	(*ORMapEntry)(nil),              // 23: crdt.ORMapEntry
	(*ORMapEntries)(nil),            // 24: crdt.ORMapEntries
	(*ORMapSize)(nil),               // 25: crdt.ORMapSize
	(*ORMapKeys)(nil),               // 26: crdt.ORMapKeys
	(*Vote)(nil),                    // 27: crdt.Vote
	(*SelfVote)(nil),                // 28: crdt.SelfVote
	(*Voters)(nil),                  // 29: crdt.Voters
	(*any.Any)(nil),                 // 30: google.protobuf.Any
}
var file_tck_crdt_proto_depIdxs = []int32{
	30, // 0: crdt.AnySupportType.any_value:type_name -> google.protobuf.Any
	2,  // 1: crdt.GSetAdd.value:type_name -> crdt.AnySupportType
	2,  // 2: crdt.GSetValue.values:type_name -> crdt.AnySupportType
	2,  // 3: crdt.GSetValueAnySupport.values:type_name -> crdt.AnySupportType
	2,  // 4: crdt.ORSetAdd.value:type_name -> crdt.AnySupportType
	2,  // 5: crdt.ORSetRemove.value:type_name -> crdt.AnySupportType
	30, // 6: crdt.ORSetValue.values:type_name -> google.protobuf.Any
	30, // 7: crdt.LWWRegisterSet.value:type_name -> google.protobuf.Any
	30, // 8: crdt.LWWRegisterSetWithClock.value:type_name -> google.protobuf.Any
	0,  // 9: crdt.LWWRegisterSetWithClock.clock:type_name -> crdt.CrdtClock
	30, // 10: crdt.LWWRegisterValue.value:type_name -> google.protobuf.Any
	30, // 11: crdt.ORMapSet.entry_key:type_name -> google.protobuf.Any
	30, // 12: crdt.ORMapSet.value:type_name -> google.protobuf.Any
	30, // 13: crdt.ORMapKey.value:type_name -> google.protobuf.Any
	30, // 14: crdt.ORMapEntry.entry_key:type_name -> google.protobuf.Any
	30, // 15: crdt.ORMapEntry.value:type_name -> google.protobuf.Any
	23, // 16: crdt.ORMapEntries.values:type_name -> crdt.ORMapEntry
	30, // 17: crdt.ORMapKeys.values:type_name -> google.protobuf.Any
	3,  // 18: crdt.TckCrdt.IncrementGCounter:input_type -> crdt.GCounterIncrement
	1,  // 19: crdt.TckCrdt.GetGCounter:input_type -> crdt.Get
	5,  // 20: crdt.TckCrdt.IncrementPNCounter:input_type -> crdt.PNCounterIncrement
	6,  // 21: crdt.TckCrdt.DecrementPNCounter:input_type -> crdt.PNCounterDecrement
	1,  // 22: crdt.TckCrdt.GetPNCounter:input_type -> crdt.Get
	8,  // 23: crdt.TckCrdt.AddGSet:input_type -> crdt.GSetAdd
	1,  // 24: crdt.TckCrdt.GetGSet:input_type -> crdt.Get
	1,  // 25: crdt.TckCrdt.GetGSetSize:input_type -> crdt.Get
	12, // 26: crdt.TckCrdt.AddORSet:input_type -> crdt.ORSetAdd
	13, // 27: crdt.TckCrdt.RemoveORSet:input_type -> crdt.ORSetRemove
	1,  // 28: crdt.TckCrdt.GetORSet:input_type -> crdt.Get
	1,  // 29: crdt.TckCrdt.GetORSetSize:input_type -> crdt.Get
	16, // 30: crdt.TckCrdt.EnableFlag:input_type -> crdt.FlagEnable
	1,  // 31: crdt.TckCrdt.GetFlag:input_type -> crdt.Get
	18, // 32: crdt.TckCrdt.SetLWWRegister:input_type -> crdt.LWWRegisterSet
	19, // 33: crdt.TckCrdt.SetLWWRegisterWithClock:input_type -> crdt.LWWRegisterSetWithClock
	1,  // 34: crdt.TckCrdt.GetLWWRegisterValue:input_type -> crdt.Get
	21, // 35: crdt.TckCrdt.SetORMap:input_type -> crdt.ORMapSet
	22, // 36: crdt.TckCrdt.DeleteORMap:input_type -> crdt.ORMapKey
	22, // 37: crdt.TckCrdt.ClearORMap:input_type -> crdt.ORMapKey
	1,  // 38: crdt.TckCrdt.GetORMapSize:input_type -> crdt.Get
	1,  // 39: crdt.TckCrdt.GetORMapEntries:input_type -> crdt.Get
	1,  // 40: crdt.TckCrdt.GetORMapKeys:input_type -> crdt.Get
	27, // 41: crdt.TckCrdt.VoteVote:input_type -> crdt.Vote
	1,  // 42: crdt.TckCrdt.GetVoteSelfVote:input_type -> crdt.Get
	1,  // 43: crdt.TckCrdt.GetVoters:input_type -> crdt.Get
	4,  // 44: crdt.TckCrdt.IncrementGCounter:output_type -> crdt.GCounterValue
	4,  // 45: crdt.TckCrdt.GetGCounter:output_type -> crdt.GCounterValue
	7,  // 46: crdt.TckCrdt.IncrementPNCounter:output_type -> crdt.PNCounterValue
	7,  // 47: crdt.TckCrdt.DecrementPNCounter:output_type -> crdt.PNCounterValue
	7,  // 48: crdt.TckCrdt.GetPNCounter:output_type -> crdt.PNCounterValue
	9,  // 49: crdt.TckCrdt.AddGSet:output_type -> crdt.GSetValue
	9,  // 50: crdt.TckCrdt.GetGSet:output_type -> crdt.GSetValue
	11, // 51: crdt.TckCrdt.GetGSetSize:output_type -> crdt.GSetSize
	14, // 52: crdt.TckCrdt.AddORSet:output_type -> crdt.ORSetValue
	14, // 53: crdt.TckCrdt.RemoveORSet:output_type -> crdt.ORSetValue
	14, // 54: crdt.TckCrdt.GetORSet:output_type -> crdt.ORSetValue
	15, // 55: crdt.TckCrdt.GetORSetSize:output_type -> crdt.ORSetSize
	17, // 56: crdt.TckCrdt.EnableFlag:output_type -> crdt.FlagValue
	17, // 57: crdt.TckCrdt.GetFlag:output_type -> crdt.FlagValue
	20, // 58: crdt.TckCrdt.SetLWWRegister:output_type -> crdt.LWWRegisterValue
	20, // 59: crdt.TckCrdt.SetLWWRegisterWithClock:output_type -> crdt.LWWRegisterValue
	20, // 60: crdt.TckCrdt.GetLWWRegisterValue:output_type -> crdt.LWWRegisterValue
	24, // 61: crdt.TckCrdt.SetORMap:output_type -> crdt.ORMapEntries
	24, // 62: crdt.TckCrdt.DeleteORMap:output_type -> crdt.ORMapEntries
	24, // 63: crdt.TckCrdt.ClearORMap:output_type -> crdt.ORMapEntries
	25, // 64: crdt.TckCrdt.GetORMapSize:output_type -> crdt.ORMapSize
	24, // 65: crdt.TckCrdt.GetORMapEntries:output_type -> crdt.ORMapEntries
	26, // 66: crdt.TckCrdt.GetORMapKeys:output_type -> crdt.ORMapKeys
	28, // 67: crdt.TckCrdt.VoteVote:output_type -> crdt.SelfVote
	28, // 68: crdt.TckCrdt.GetVoteSelfVote:output_type -> crdt.SelfVote
	29, // 69: crdt.TckCrdt.GetVoters:output_type -> crdt.Voters
	44, // [44:70] is the sub-list for method output_type
	18, // [18:44] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_tck_crdt_proto_init() }
func file_tck_crdt_proto_init() {
	if File_tck_crdt_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tck_crdt_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Get); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnySupportType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCounterIncrement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCounterValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PNCounterIncrement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PNCounterDecrement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PNCounterValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GSetAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GSetValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GSetValueAnySupport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GSetSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ORSetAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ORSetRemove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ORSetValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ORSetSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagEnable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LWWRegisterSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LWWRegisterSetWithClock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LWWRegisterValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ORMapSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ORMapKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ORMapEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ORMapEntries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ORMapSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ORMapKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelfVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tck_crdt_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Voters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tck_crdt_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*AnySupportType_AnyValue)(nil),
		(*AnySupportType_StringValue)(nil),
		(*AnySupportType_BytesValue)(nil),
		(*AnySupportType_Int32Value)(nil),
		(*AnySupportType_Int64Value)(nil),
		(*AnySupportType_FloatValue)(nil),
		(*AnySupportType_DoubleValue)(nil),
		(*AnySupportType_BoolValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tck_crdt_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tck_crdt_proto_goTypes,
		DependencyIndexes: file_tck_crdt_proto_depIdxs,
		EnumInfos:         file_tck_crdt_proto_enumTypes,
		MessageInfos:      file_tck_crdt_proto_msgTypes,
	}.Build()
	File_tck_crdt_proto = out.File
	file_tck_crdt_proto_rawDesc = nil
	file_tck_crdt_proto_goTypes = nil
	file_tck_crdt_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TckCrdtClient is the client API for TckCrdt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TckCrdtClient interface {
	IncrementGCounter(ctx context.Context, in *GCounterIncrement, opts ...grpc.CallOption) (*GCounterValue, error)
	GetGCounter(ctx context.Context, in *Get, opts ...grpc.CallOption) (*GCounterValue, error)
	IncrementPNCounter(ctx context.Context, in *PNCounterIncrement, opts ...grpc.CallOption) (*PNCounterValue, error)
	DecrementPNCounter(ctx context.Context, in *PNCounterDecrement, opts ...grpc.CallOption) (*PNCounterValue, error)
	GetPNCounter(ctx context.Context, in *Get, opts ...grpc.CallOption) (*PNCounterValue, error)
	AddGSet(ctx context.Context, in *GSetAdd, opts ...grpc.CallOption) (*GSetValue, error)
	GetGSet(ctx context.Context, in *Get, opts ...grpc.CallOption) (*GSetValue, error)
	// GetGSetAnySupport forces the user support to unmarshal the types he
	// put into a GSet to be of the well known AnySupport types of cloudstate.
	//    rpc GetGSetAnySupport (Get) returns (GSetValueAnySupport);
	GetGSetSize(ctx context.Context, in *Get, opts ...grpc.CallOption) (*GSetSize, error)
	AddORSet(ctx context.Context, in *ORSetAdd, opts ...grpc.CallOption) (*ORSetValue, error)
	RemoveORSet(ctx context.Context, in *ORSetRemove, opts ...grpc.CallOption) (*ORSetValue, error)
	GetORSet(ctx context.Context, in *Get, opts ...grpc.CallOption) (*ORSetValue, error)
	GetORSetSize(ctx context.Context, in *Get, opts ...grpc.CallOption) (*ORSetSize, error)
	EnableFlag(ctx context.Context, in *FlagEnable, opts ...grpc.CallOption) (*FlagValue, error)
	GetFlag(ctx context.Context, in *Get, opts ...grpc.CallOption) (*FlagValue, error)
	SetLWWRegister(ctx context.Context, in *LWWRegisterSet, opts ...grpc.CallOption) (*LWWRegisterValue, error)
	SetLWWRegisterWithClock(ctx context.Context, in *LWWRegisterSetWithClock, opts ...grpc.CallOption) (*LWWRegisterValue, error)
	GetLWWRegisterValue(ctx context.Context, in *Get, opts ...grpc.CallOption) (*LWWRegisterValue, error)
	SetORMap(ctx context.Context, in *ORMapSet, opts ...grpc.CallOption) (*ORMapEntries, error)
	DeleteORMap(ctx context.Context, in *ORMapKey, opts ...grpc.CallOption) (*ORMapEntries, error)
	ClearORMap(ctx context.Context, in *ORMapKey, opts ...grpc.CallOption) (*ORMapEntries, error)
	GetORMapSize(ctx context.Context, in *Get, opts ...grpc.CallOption) (*ORMapSize, error)
	GetORMapEntries(ctx context.Context, in *Get, opts ...grpc.CallOption) (*ORMapEntries, error)
	GetORMapKeys(ctx context.Context, in *Get, opts ...grpc.CallOption) (*ORMapKeys, error)
	VoteVote(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*SelfVote, error)
	GetVoteSelfVote(ctx context.Context, in *Get, opts ...grpc.CallOption) (*SelfVote, error)
	GetVoters(ctx context.Context, in *Get, opts ...grpc.CallOption) (*Voters, error)
}

type tckCrdtClient struct {
	cc grpc.ClientConnInterface
}

func NewTckCrdtClient(cc grpc.ClientConnInterface) TckCrdtClient {
	return &tckCrdtClient{cc}
}

func (c *tckCrdtClient) IncrementGCounter(ctx context.Context, in *GCounterIncrement, opts ...grpc.CallOption) (*GCounterValue, error) {
	out := new(GCounterValue)
	err := c.cc.Invoke(ctx, "/crdt.TckCrdt/IncrementGCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tckCrdtClient) GetGCounter(ctx context.Context, in *Get, opts ...grpc.CallOption) (*GCounterValue, error) {
	out := new(GCounterValue)
	err := c.cc.Invoke(ctx, "/crdt.TckCrdt/GetGCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tckCrdtClient) IncrementPNCounter(ctx context.Context, in *PNCounterIncrement, opts ...grpc.CallOption) (*PNCounterValue, error) {
	out := new(PNCounterValue)
	err := c.cc.Invoke(ctx, "/crdt.TckCrdt/IncrementPNCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tckCrdtClient) DecrementPNCounter(ctx context.Context, in *PNCounterDecrement, opts ...grpc.CallOption) (*PNCounterValue, error) {
	out := new(PNCounterValue)
	err := c.cc.Invoke(ctx, "/crdt.TckCrdt/DecrementPNCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tckCrdtClient) GetPNCounter(ctx context.Context, in *Get, opts ...grpc.CallOption) (*PNCounterValue, error) {
	out := new(PNCounterValue)
	err := c.cc.Invoke(ctx, "/crdt.TckCrdt/GetPNCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tckCrdtClient) AddGSet(ctx context.Context, in *GSetAdd, opts ...grpc.CallOption) (*GSetValue, error) {
	out := new(GSetValue)
	err := c.cc.Invoke(ctx, "/crdt.TckCrdt/AddGSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tckCrdtClient) GetGSet(ctx context.Context, in *Get, opts ...grpc.CallOption) (*GSetValue, error) {
	out := new(GSetValue)
	err := c.cc.Invoke(ctx, "/crdt.TckCrdt/GetGSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tckCrdtClient) GetGSetSize(ctx context.Context, in *Get, opts ...grpc.CallOption) (*GSetSize, error) {
	out := new(GSetSize)
	err := c.cc.Invoke(ctx, "/crdt.TckCrdt/GetGSetSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tckCrdtClient) AddORSet(ctx context.Context, in *ORSetAdd, opts ...grpc.CallOption) (*ORSetValue, error) {
	out := new(ORSetValue)
	err := c.cc.Invoke(ctx, "/crdt.TckCrdt/AddORSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tckCrdtClient) RemoveORSet(ctx context.Context, in *ORSetRemove, opts ...grpc.CallOption) (*ORSetValue, error) {
	out := new(ORSetValue)
	err := c.cc.Invoke(ctx, "/crdt.TckCrdt/RemoveORSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tckCrdtClient) GetORSet(ctx context.Context, in *Get, opts ...grpc.CallOption) (*ORSetValue, error) {
	out := new(ORSetValue)
	err := c.cc.Invoke(ctx, "/crdt.TckCrdt/GetORSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tckCrdtClient) GetORSetSize(ctx context.Context, in *Get, opts ...grpc.CallOption) (*ORSetSize, error) {
	out := new(ORSetSize)
	err := c.cc.Invoke(ctx, "/crdt.TckCrdt/GetORSetSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tckCrdtClient) EnableFlag(ctx context.Context, in *FlagEnable, opts ...grpc.CallOption) (*FlagValue, error) {
	out := new(FlagValue)
	err := c.cc.Invoke(ctx, "/crdt.TckCrdt/EnableFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tckCrdtClient) GetFlag(ctx context.Context, in *Get, opts ...grpc.CallOption) (*FlagValue, error) {
	out := new(FlagValue)
	err := c.cc.Invoke(ctx, "/crdt.TckCrdt/GetFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tckCrdtClient) SetLWWRegister(ctx context.Context, in *LWWRegisterSet, opts ...grpc.CallOption) (*LWWRegisterValue, error) {
	out := new(LWWRegisterValue)
	err := c.cc.Invoke(ctx, "/crdt.TckCrdt/SetLWWRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tckCrdtClient) SetLWWRegisterWithClock(ctx context.Context, in *LWWRegisterSetWithClock, opts ...grpc.CallOption) (*LWWRegisterValue, error) {
	out := new(LWWRegisterValue)
	err := c.cc.Invoke(ctx, "/crdt.TckCrdt/SetLWWRegisterWithClock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tckCrdtClient) GetLWWRegisterValue(ctx context.Context, in *Get, opts ...grpc.CallOption) (*LWWRegisterValue, error) {
	out := new(LWWRegisterValue)
	err := c.cc.Invoke(ctx, "/crdt.TckCrdt/GetLWWRegisterValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tckCrdtClient) SetORMap(ctx context.Context, in *ORMapSet, opts ...grpc.CallOption) (*ORMapEntries, error) {
	out := new(ORMapEntries)
	err := c.cc.Invoke(ctx, "/crdt.TckCrdt/SetORMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tckCrdtClient) DeleteORMap(ctx context.Context, in *ORMapKey, opts ...grpc.CallOption) (*ORMapEntries, error) {
	out := new(ORMapEntries)
	err := c.cc.Invoke(ctx, "/crdt.TckCrdt/DeleteORMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tckCrdtClient) ClearORMap(ctx context.Context, in *ORMapKey, opts ...grpc.CallOption) (*ORMapEntries, error) {
	out := new(ORMapEntries)
	err := c.cc.Invoke(ctx, "/crdt.TckCrdt/ClearORMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tckCrdtClient) GetORMapSize(ctx context.Context, in *Get, opts ...grpc.CallOption) (*ORMapSize, error) {
	out := new(ORMapSize)
	err := c.cc.Invoke(ctx, "/crdt.TckCrdt/GetORMapSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tckCrdtClient) GetORMapEntries(ctx context.Context, in *Get, opts ...grpc.CallOption) (*ORMapEntries, error) {
	out := new(ORMapEntries)
	err := c.cc.Invoke(ctx, "/crdt.TckCrdt/GetORMapEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tckCrdtClient) GetORMapKeys(ctx context.Context, in *Get, opts ...grpc.CallOption) (*ORMapKeys, error) {
	out := new(ORMapKeys)
	err := c.cc.Invoke(ctx, "/crdt.TckCrdt/GetORMapKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tckCrdtClient) VoteVote(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*SelfVote, error) {
	out := new(SelfVote)
	err := c.cc.Invoke(ctx, "/crdt.TckCrdt/VoteVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tckCrdtClient) GetVoteSelfVote(ctx context.Context, in *Get, opts ...grpc.CallOption) (*SelfVote, error) {
	out := new(SelfVote)
	err := c.cc.Invoke(ctx, "/crdt.TckCrdt/GetVoteSelfVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tckCrdtClient) GetVoters(ctx context.Context, in *Get, opts ...grpc.CallOption) (*Voters, error) {
	out := new(Voters)
	err := c.cc.Invoke(ctx, "/crdt.TckCrdt/GetVoters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TckCrdtServer is the server API for TckCrdt service.
type TckCrdtServer interface {
	IncrementGCounter(context.Context, *GCounterIncrement) (*GCounterValue, error)
	GetGCounter(context.Context, *Get) (*GCounterValue, error)
	IncrementPNCounter(context.Context, *PNCounterIncrement) (*PNCounterValue, error)
	DecrementPNCounter(context.Context, *PNCounterDecrement) (*PNCounterValue, error)
	GetPNCounter(context.Context, *Get) (*PNCounterValue, error)
	AddGSet(context.Context, *GSetAdd) (*GSetValue, error)
	GetGSet(context.Context, *Get) (*GSetValue, error)
	// GetGSetAnySupport forces the user support to unmarshal the types he
	// put into a GSet to be of the well known AnySupport types of cloudstate.
	//    rpc GetGSetAnySupport (Get) returns (GSetValueAnySupport);
	GetGSetSize(context.Context, *Get) (*GSetSize, error)
	AddORSet(context.Context, *ORSetAdd) (*ORSetValue, error)
	RemoveORSet(context.Context, *ORSetRemove) (*ORSetValue, error)
	GetORSet(context.Context, *Get) (*ORSetValue, error)
	GetORSetSize(context.Context, *Get) (*ORSetSize, error)
	EnableFlag(context.Context, *FlagEnable) (*FlagValue, error)
	GetFlag(context.Context, *Get) (*FlagValue, error)
	SetLWWRegister(context.Context, *LWWRegisterSet) (*LWWRegisterValue, error)
	SetLWWRegisterWithClock(context.Context, *LWWRegisterSetWithClock) (*LWWRegisterValue, error)
	GetLWWRegisterValue(context.Context, *Get) (*LWWRegisterValue, error)
	SetORMap(context.Context, *ORMapSet) (*ORMapEntries, error)
	DeleteORMap(context.Context, *ORMapKey) (*ORMapEntries, error)
	ClearORMap(context.Context, *ORMapKey) (*ORMapEntries, error)
	GetORMapSize(context.Context, *Get) (*ORMapSize, error)
	GetORMapEntries(context.Context, *Get) (*ORMapEntries, error)
	GetORMapKeys(context.Context, *Get) (*ORMapKeys, error)
	VoteVote(context.Context, *Vote) (*SelfVote, error)
	GetVoteSelfVote(context.Context, *Get) (*SelfVote, error)
	GetVoters(context.Context, *Get) (*Voters, error)
}

// UnimplementedTckCrdtServer can be embedded to have forward compatible implementations.
type UnimplementedTckCrdtServer struct {
}

func (*UnimplementedTckCrdtServer) IncrementGCounter(context.Context, *GCounterIncrement) (*GCounterValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementGCounter not implemented")
}
func (*UnimplementedTckCrdtServer) GetGCounter(context.Context, *Get) (*GCounterValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGCounter not implemented")
}
func (*UnimplementedTckCrdtServer) IncrementPNCounter(context.Context, *PNCounterIncrement) (*PNCounterValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementPNCounter not implemented")
}
func (*UnimplementedTckCrdtServer) DecrementPNCounter(context.Context, *PNCounterDecrement) (*PNCounterValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecrementPNCounter not implemented")
}
func (*UnimplementedTckCrdtServer) GetPNCounter(context.Context, *Get) (*PNCounterValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPNCounter not implemented")
}
func (*UnimplementedTckCrdtServer) AddGSet(context.Context, *GSetAdd) (*GSetValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGSet not implemented")
}
func (*UnimplementedTckCrdtServer) GetGSet(context.Context, *Get) (*GSetValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGSet not implemented")
}
func (*UnimplementedTckCrdtServer) GetGSetSize(context.Context, *Get) (*GSetSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGSetSize not implemented")
}
func (*UnimplementedTckCrdtServer) AddORSet(context.Context, *ORSetAdd) (*ORSetValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddORSet not implemented")
}
func (*UnimplementedTckCrdtServer) RemoveORSet(context.Context, *ORSetRemove) (*ORSetValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveORSet not implemented")
}
func (*UnimplementedTckCrdtServer) GetORSet(context.Context, *Get) (*ORSetValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetORSet not implemented")
}
func (*UnimplementedTckCrdtServer) GetORSetSize(context.Context, *Get) (*ORSetSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetORSetSize not implemented")
}
func (*UnimplementedTckCrdtServer) EnableFlag(context.Context, *FlagEnable) (*FlagValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableFlag not implemented")
}
func (*UnimplementedTckCrdtServer) GetFlag(context.Context, *Get) (*FlagValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlag not implemented")
}
func (*UnimplementedTckCrdtServer) SetLWWRegister(context.Context, *LWWRegisterSet) (*LWWRegisterValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLWWRegister not implemented")
}
func (*UnimplementedTckCrdtServer) SetLWWRegisterWithClock(context.Context, *LWWRegisterSetWithClock) (*LWWRegisterValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLWWRegisterWithClock not implemented")
}
func (*UnimplementedTckCrdtServer) GetLWWRegisterValue(context.Context, *Get) (*LWWRegisterValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLWWRegisterValue not implemented")
}
func (*UnimplementedTckCrdtServer) SetORMap(context.Context, *ORMapSet) (*ORMapEntries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetORMap not implemented")
}
func (*UnimplementedTckCrdtServer) DeleteORMap(context.Context, *ORMapKey) (*ORMapEntries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteORMap not implemented")
}
func (*UnimplementedTckCrdtServer) ClearORMap(context.Context, *ORMapKey) (*ORMapEntries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearORMap not implemented")
}
func (*UnimplementedTckCrdtServer) GetORMapSize(context.Context, *Get) (*ORMapSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetORMapSize not implemented")
}
func (*UnimplementedTckCrdtServer) GetORMapEntries(context.Context, *Get) (*ORMapEntries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetORMapEntries not implemented")
}
func (*UnimplementedTckCrdtServer) GetORMapKeys(context.Context, *Get) (*ORMapKeys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetORMapKeys not implemented")
}
func (*UnimplementedTckCrdtServer) VoteVote(context.Context, *Vote) (*SelfVote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteVote not implemented")
}
func (*UnimplementedTckCrdtServer) GetVoteSelfVote(context.Context, *Get) (*SelfVote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoteSelfVote not implemented")
}
func (*UnimplementedTckCrdtServer) GetVoters(context.Context, *Get) (*Voters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoters not implemented")
}

func RegisterTckCrdtServer(s *grpc.Server, srv TckCrdtServer) {
	s.RegisterService(&_TckCrdt_serviceDesc, srv)
}

func _TckCrdt_IncrementGCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GCounterIncrement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TckCrdtServer).IncrementGCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crdt.TckCrdt/IncrementGCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TckCrdtServer).IncrementGCounter(ctx, req.(*GCounterIncrement))
	}
	return interceptor(ctx, in, info, handler)
}

func _TckCrdt_GetGCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Get)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TckCrdtServer).GetGCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crdt.TckCrdt/GetGCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TckCrdtServer).GetGCounter(ctx, req.(*Get))
	}
	return interceptor(ctx, in, info, handler)
}

func _TckCrdt_IncrementPNCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PNCounterIncrement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TckCrdtServer).IncrementPNCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crdt.TckCrdt/IncrementPNCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TckCrdtServer).IncrementPNCounter(ctx, req.(*PNCounterIncrement))
	}
	return interceptor(ctx, in, info, handler)
}

func _TckCrdt_DecrementPNCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PNCounterDecrement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TckCrdtServer).DecrementPNCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crdt.TckCrdt/DecrementPNCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TckCrdtServer).DecrementPNCounter(ctx, req.(*PNCounterDecrement))
	}
	return interceptor(ctx, in, info, handler)
}

func _TckCrdt_GetPNCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Get)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TckCrdtServer).GetPNCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crdt.TckCrdt/GetPNCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TckCrdtServer).GetPNCounter(ctx, req.(*Get))
	}
	return interceptor(ctx, in, info, handler)
}

func _TckCrdt_AddGSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GSetAdd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TckCrdtServer).AddGSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crdt.TckCrdt/AddGSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TckCrdtServer).AddGSet(ctx, req.(*GSetAdd))
	}
	return interceptor(ctx, in, info, handler)
}

func _TckCrdt_GetGSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Get)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TckCrdtServer).GetGSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crdt.TckCrdt/GetGSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TckCrdtServer).GetGSet(ctx, req.(*Get))
	}
	return interceptor(ctx, in, info, handler)
}

func _TckCrdt_GetGSetSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Get)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TckCrdtServer).GetGSetSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crdt.TckCrdt/GetGSetSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TckCrdtServer).GetGSetSize(ctx, req.(*Get))
	}
	return interceptor(ctx, in, info, handler)
}

func _TckCrdt_AddORSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ORSetAdd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TckCrdtServer).AddORSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crdt.TckCrdt/AddORSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TckCrdtServer).AddORSet(ctx, req.(*ORSetAdd))
	}
	return interceptor(ctx, in, info, handler)
}

func _TckCrdt_RemoveORSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ORSetRemove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TckCrdtServer).RemoveORSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crdt.TckCrdt/RemoveORSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TckCrdtServer).RemoveORSet(ctx, req.(*ORSetRemove))
	}
	return interceptor(ctx, in, info, handler)
}

func _TckCrdt_GetORSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Get)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TckCrdtServer).GetORSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crdt.TckCrdt/GetORSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TckCrdtServer).GetORSet(ctx, req.(*Get))
	}
	return interceptor(ctx, in, info, handler)
}

func _TckCrdt_GetORSetSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Get)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TckCrdtServer).GetORSetSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crdt.TckCrdt/GetORSetSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TckCrdtServer).GetORSetSize(ctx, req.(*Get))
	}
	return interceptor(ctx, in, info, handler)
}

func _TckCrdt_EnableFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlagEnable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TckCrdtServer).EnableFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crdt.TckCrdt/EnableFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TckCrdtServer).EnableFlag(ctx, req.(*FlagEnable))
	}
	return interceptor(ctx, in, info, handler)
}

func _TckCrdt_GetFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Get)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TckCrdtServer).GetFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crdt.TckCrdt/GetFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TckCrdtServer).GetFlag(ctx, req.(*Get))
	}
	return interceptor(ctx, in, info, handler)
}

func _TckCrdt_SetLWWRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LWWRegisterSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TckCrdtServer).SetLWWRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crdt.TckCrdt/SetLWWRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TckCrdtServer).SetLWWRegister(ctx, req.(*LWWRegisterSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _TckCrdt_SetLWWRegisterWithClock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LWWRegisterSetWithClock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TckCrdtServer).SetLWWRegisterWithClock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crdt.TckCrdt/SetLWWRegisterWithClock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TckCrdtServer).SetLWWRegisterWithClock(ctx, req.(*LWWRegisterSetWithClock))
	}
	return interceptor(ctx, in, info, handler)
}

func _TckCrdt_GetLWWRegisterValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Get)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TckCrdtServer).GetLWWRegisterValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crdt.TckCrdt/GetLWWRegisterValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TckCrdtServer).GetLWWRegisterValue(ctx, req.(*Get))
	}
	return interceptor(ctx, in, info, handler)
}

func _TckCrdt_SetORMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ORMapSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TckCrdtServer).SetORMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crdt.TckCrdt/SetORMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TckCrdtServer).SetORMap(ctx, req.(*ORMapSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _TckCrdt_DeleteORMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ORMapKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TckCrdtServer).DeleteORMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crdt.TckCrdt/DeleteORMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TckCrdtServer).DeleteORMap(ctx, req.(*ORMapKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _TckCrdt_ClearORMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ORMapKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TckCrdtServer).ClearORMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crdt.TckCrdt/ClearORMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TckCrdtServer).ClearORMap(ctx, req.(*ORMapKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _TckCrdt_GetORMapSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Get)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TckCrdtServer).GetORMapSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crdt.TckCrdt/GetORMapSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TckCrdtServer).GetORMapSize(ctx, req.(*Get))
	}
	return interceptor(ctx, in, info, handler)
}

func _TckCrdt_GetORMapEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Get)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TckCrdtServer).GetORMapEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crdt.TckCrdt/GetORMapEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TckCrdtServer).GetORMapEntries(ctx, req.(*Get))
	}
	return interceptor(ctx, in, info, handler)
}

func _TckCrdt_GetORMapKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Get)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TckCrdtServer).GetORMapKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crdt.TckCrdt/GetORMapKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TckCrdtServer).GetORMapKeys(ctx, req.(*Get))
	}
	return interceptor(ctx, in, info, handler)
}

func _TckCrdt_VoteVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TckCrdtServer).VoteVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crdt.TckCrdt/VoteVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TckCrdtServer).VoteVote(ctx, req.(*Vote))
	}
	return interceptor(ctx, in, info, handler)
}

func _TckCrdt_GetVoteSelfVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Get)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TckCrdtServer).GetVoteSelfVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crdt.TckCrdt/GetVoteSelfVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TckCrdtServer).GetVoteSelfVote(ctx, req.(*Get))
	}
	return interceptor(ctx, in, info, handler)
}

func _TckCrdt_GetVoters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Get)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TckCrdtServer).GetVoters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crdt.TckCrdt/GetVoters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TckCrdtServer).GetVoters(ctx, req.(*Get))
	}
	return interceptor(ctx, in, info, handler)
}

var _TckCrdt_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crdt.TckCrdt",
	HandlerType: (*TckCrdtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IncrementGCounter",
			Handler:    _TckCrdt_IncrementGCounter_Handler,
		},
		{
			MethodName: "GetGCounter",
			Handler:    _TckCrdt_GetGCounter_Handler,
		},
		{
			MethodName: "IncrementPNCounter",
			Handler:    _TckCrdt_IncrementPNCounter_Handler,
		},
		{
			MethodName: "DecrementPNCounter",
			Handler:    _TckCrdt_DecrementPNCounter_Handler,
		},
		{
			MethodName: "GetPNCounter",
			Handler:    _TckCrdt_GetPNCounter_Handler,
		},
		{
			MethodName: "AddGSet",
			Handler:    _TckCrdt_AddGSet_Handler,
		},
		{
			MethodName: "GetGSet",
			Handler:    _TckCrdt_GetGSet_Handler,
		},
		{
			MethodName: "GetGSetSize",
			Handler:    _TckCrdt_GetGSetSize_Handler,
		},
		{
			MethodName: "AddORSet",
			Handler:    _TckCrdt_AddORSet_Handler,
		},
		{
			MethodName: "RemoveORSet",
			Handler:    _TckCrdt_RemoveORSet_Handler,
		},
		{
			MethodName: "GetORSet",
			Handler:    _TckCrdt_GetORSet_Handler,
		},
		{
			MethodName: "GetORSetSize",
			Handler:    _TckCrdt_GetORSetSize_Handler,
		},
		{
			MethodName: "EnableFlag",
			Handler:    _TckCrdt_EnableFlag_Handler,
		},
		{
			MethodName: "GetFlag",
			Handler:    _TckCrdt_GetFlag_Handler,
		},
		{
			MethodName: "SetLWWRegister",
			Handler:    _TckCrdt_SetLWWRegister_Handler,
		},
		{
			MethodName: "SetLWWRegisterWithClock",
			Handler:    _TckCrdt_SetLWWRegisterWithClock_Handler,
		},
		{
			MethodName: "GetLWWRegisterValue",
			Handler:    _TckCrdt_GetLWWRegisterValue_Handler,
		},
		{
			MethodName: "SetORMap",
			Handler:    _TckCrdt_SetORMap_Handler,
		},
		{
			MethodName: "DeleteORMap",
			Handler:    _TckCrdt_DeleteORMap_Handler,
		},
		{
			MethodName: "ClearORMap",
			Handler:    _TckCrdt_ClearORMap_Handler,
		},
		{
			MethodName: "GetORMapSize",
			Handler:    _TckCrdt_GetORMapSize_Handler,
		},
		{
			MethodName: "GetORMapEntries",
			Handler:    _TckCrdt_GetORMapEntries_Handler,
		},
		{
			MethodName: "GetORMapKeys",
			Handler:    _TckCrdt_GetORMapKeys_Handler,
		},
		{
			MethodName: "VoteVote",
			Handler:    _TckCrdt_VoteVote_Handler,
		},
		{
			MethodName: "GetVoteSelfVote",
			Handler:    _TckCrdt_GetVoteSelfVote_Handler,
		},
		{
			MethodName: "GetVoters",
			Handler:    _TckCrdt_GetVoters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tck_crdt.proto",
}
